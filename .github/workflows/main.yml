name: Deploy to AWS ECS

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "17"

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build React App Docker Image
        run: |
          cd StudentManageFrontend/studentclient
          docker build -t studentmanage-react-app:latest .

      - name: Build Spring Boot App Docker Image
        run: |
          cd StudentManageBackend/studentserver
          mvn clean package -DskipTests
          docker build -t studentmanage-spring-boot-app:latest .

      - name: Push Docker Images to Docker Hub
        run: |
          docker tag studentmanage-react-app:latest ${{ secrets.DOCKER_USERNAME }}/studentmanage-react-app:latest
          docker tag studentmanage-spring-boot-app:latest ${{ secrets.DOCKER_USERNAME }}/studentmanage-spring-boot-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/studentmanage-react-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/studentmanage-spring-boot-app:latest

      - name: Copy docker-compose.yml via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          source: "./docker-compose.yml"
          target: "/home/ubuntu/docker-compose.yml"

      - name: Docker pull and run on host
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu
            docker-compose down
            docker-compose pull
            docker-compose up -d
